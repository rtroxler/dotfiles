# Set prefix to Ctrl-Space
unbind C-b
set -g prefix C-Space
bind Space send-prefix

set-option -g history-limit 55000

unbind %
unbind-key -n Tab
unbind-key -n BTab
unbind-key -n C-j
unbind-key -n C-k
unbind-key -n C-BSpace
bind | split-window -h
bind - split-window -v

# Moving between windows with C-s and C-h

bind-key -n C-l next
bind-key -n C-h prev

#remove prompt for killing panes
bind-key x kill-pane

# xterm keys
set-window-option -g xterm-keys on

# Moving windows
bind-key -r > swap-window -t :+
bind-key -r < swap-window -t :-

#visual bell
#setw -g monitor-activity on
set -g visual-activity off
set -g visual-bell off

bind-key -n C-. next-window
bind-key -n C-, previous-window

#Moving between panes with h,j,k,l
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

# Zoom zoom zoom
bind-key -n C-f resize-pane -Z

bind-key -n M-S-Left resize-pane -L 2
bind-key -n M-S-Right resize-pane -R 2
bind-key -n M-S-Up resize-pane -U 2
bind-key -n M-S-Down resize-pane -D 4



# statusbar --------------------------------------------------------------

set -g display-time 2000

# command/message line colors
set -g message-fg black
set -g message-bg white
set -g message-attr dim

# center align the window list
set -g status-justify centre

# show some useful info
set -g status-left "[#[fg=white,bold]#S#[default]]"
set -g status-left-length 50
set -g status-right "[#[fg=white,bold]%a %Y-%m-%d  %H:%M#[default]]"
set -g status-right-length 50

set -g window-status-current-style bg=white

set -g status-bg colour244
set -g status-fg colour15

setw -g mode-mouse on
set -g mouse-resize-pane on
set -g mouse-select-pane on

#default shell zsh
set-option -g default-shell /bin/zsh

set -g default-terminal "screen-256color"

#some vim copy stuff
set-window-option -g mode-keys vi

set-option -g set-titles on
set-option -g set-titles-string '#S.#I #W'

set-option -sg escape-time 0

bind-key [ copy-mode

bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-pipe 'xclip -in -selection clipboard'

if-shell 'test "$(uname -s)" = "Linux"' 'bind-key y run-shell "tmux show-buffer | xclip -sel clip -i" \; display-message "Copied tmux buffer to system clipboard"'
